openapi: 3.0.0
info:
  description: "This is the Specification for Palaten-Studios' API Backend (palaten_api)"
  version: 0.0.0
  title: palaten_api
  termsOfService: https://www.palaten.de/legal/terms/
  contact:
    email: info@palaten.de
  license:
    name: MIT
    url: https://github.com/Palaten-Studios/docs/blob/master/LICENSE

tags:
  - name: validation
    description: Operations about validating that something is correct
  - name: authentification
    description: Operations about authenticating/changing authentification
  - name: verification
    description: Operations that require a code received via email
  - name: account
    description: Operations about changing account details
  - name: sudo
    description: Operations that require sudo mode
  - name: fetch
    description: Operations that fetch data
#    externalDocs:
#      description: Find out more
#      url: https://docs.palaten.de/

paths:
  /:
    get:
      tags:
        - validation
        - fetch
      summary: Fetch instance information
      description: "Fetches important information about the instance like the version or which service is running. Mostly used for validation."
      operationId: info
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                    description: "The api version."
                    example: "1.0.0"
                  pgsql:
                    type: string
                    description: "The postgresql version used. [Learn why we are disclosing this](https://docs.palaten.de/transparency)"
                    example: "PostgreSQL 14.5 (Ubuntu 14.5-0ubuntu0.22.04.1) on x86_64-pc-linux-gnu, compiled by gcc (Ubuntu 11.2.0-19ubuntu1) 11.2.0, 64-bit"
                  service:
                    type: string
                    description: "The service identifier."
                    enum:
                    - "palaten_api"
  /login:
    post:
      tags:
        - authentification
      summary: Login
      description: "Logs into an existing account using a username/email and a password. This will return a sessionId which can be later used in other requests to authenticate."
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  description: "The user's username/email."
                  example: "example@email.com"
                password:
                  type: string
                  description: "The user's password's SHA512 hex digest."
                  example: "6A1A778143E4672886991729035807CABEB75AD42A3FE4BF580CFBDF5CEA7C476705D878AF5F0FD0DC07D19F2959E224B21788E561F046177F6752B4BCC59E2C"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  sessionId:
                    type: string
                    description: "The sessionId which can be used for authentification."
                    example: "1FA74E9D04B813BD69CDDE52A3612AB8849E50E2016BC22206E0752EC7956FEE"

  /register:
    post:
      tags:
        - authentification
      summary: Register
      description: "Creates a new account. Needs to be verified via email before login is possible."
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: "The username, must be between 4 and 32 characters long and may only include `a-zA-Z0-9_-`."
                  example: "ExampleUser"
                password:
                  type: string
                  description: "The password's SHA512 hex digest."
                  example: "6A1A778143E4672886991729035807CABEB75AD42A3FE4BF580CFBDF5CEA7C476705D878AF5F0FD0DC07D19F2959E224B21788E561F046177F6752B4BCC59E2C"
                email:
                  type: string
                  description: "The email address. Must match `^\\w+(\\.[\\+\\w-]+)*@((\\w+-+)*\\w+\\.){1,}[a-zA-Z]{2,18}$`"
                  example: "example@email.com"
      responses:
        "200":
          description: OK
  
  "/verify/{code}":
    get:
      tags:
        - verification
      summary: Verify email
      description: "Verifies an account by a code received via email."
      operationId: verify
      parameters:
        - name: code
          in: path
          required: true
          schema:
            type: string
          description: "The code received via email."
          example: "0F6E7D0EA0C491C8D9A0DDDD0B2FEAFC"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  sessionId:
                    type: string
                    description: "The session id"
                    example: "1FA74E9D04B813BD69CDDE52A3612AB8849E50E2016BC22206E0752EC7956FEE"
  
  /logout:
    post:
      tags:
        - authentification
      summary: Logout
      description: "Destroys the active session."
      operationId: logout
      parameters:
        - $ref: "#/components/parameters/sessionId"
      responses:
        "200":
          description: OK
          
  /account/username/change:
    post:
      tags:
        - authentification
        - account
        - sudo
      summary: Change username
      description: "Changes the username of a user. This will **NOT** send an email."
      operationId: username_change
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                newUsername:
                  type: string
                  description: "The new username"
                  example: "SomeUsername"
      parameters:
        - $ref: "#/components/parameters/sessionId"
      responses:
        "200":
          description: OK
          
  /account/password/change:
    post:
      tags:
        - authentification
        - account
      summary: Request a password reset
      description: "Requests a password reset. This will send an email to the address referenced if an account with such exists."
      operationId: request_password_change
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: "The email address the account is associated with"
                  example: "example@email.com"
      responses:
        "200":
          description: OK

  /account/password/change/{code}:
    post:
      tags:
        - authentification
        - account
        - verification
      summary: Reset password
      description: "Resets the password by a code received via email."
      operationId: password_change
      parameters:
        - name: code
          in: path
          required: true
          schema:
            type: string
          description: "The code received via email."
          example: "0F6E7D0EA0C491C8D9A0DDDD0B2FEAFC"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
                  description: "The new password's SHA512 hex digest"
                  example: "D47B43BBD770EC97823A76A6545B9F8C18E5AE6EB59BD8C9056ED882E18C1414BDE7DE8E166E85B2CB4B42E0A843861803422FF3058FD37F4E6890F4801523C9"
      responses:
        "200":
          description: OK
          
  /account/email/change:
    post:
      tags:
        - authentification
        - account
        - sudo
      summary: Request email change
      description: "Requests an email change. This will send an email to both parties."
      operationId: request_email_change
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                newEmail:
                  type: string
                  description: "The new email"
                  example: "other@email.com"
      parameters:
        - $ref: "#/components/parameters/sessionId"
      responses:
        "200":
          description: OK

  /account/email/change/{code}:
    get:
      tags:
        - authentification
        - account
        - verification
      summary: Change email
      description: "Verifies ownership via a code before changing the email. Both parties will need to accept (make a request with the received code to this route) before the email will be changed."
      operationId: email_change
      parameters:
        - name: code
          in: path
          required: true
          schema:
            type: string
          description: "The code received via email."
          example: "0F6E7D0EA0C491C8D9A0DDDD0B2FEAFC"
      responses:
        "200":
          description: OK
    
  /account:
    delete:
      tags:
        - account
        - sudo
      summary: Request account deletion
      description: "Requests an account deletion. This will send an email."
      operationId: request_account_delete
      parameters:
        - $ref: "#/components/parameters/sessionId"
      responses:
        "200":
          description: OK

  /account/{code}:
    delete:
      tags:
        - account
        - verification
      summary: Delete account
      description: "Deletes an account. This will act as our [Privacy Policy](https://www.palaten.de/legal/privacy/) states."
      operationId: account_delete
      parameters:
        - name: code
          in: path
          required: true
          schema:
            type: string
          description: "The code received via email."
          example: "0F6E7D0EA0C491C8D9A0DDDD0B2FEAFC"
      responses:
        "200":
          description: OK

  /users/{id}:
    get:
      tags:
        - fetch
      summary: Fetch user
      description: "Fetches a user via its id."
      operationId: users_fetch
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: "The user's id"
          example: 69
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/me:
    get:
      tags:
        - fetch
      summary: Fetch self
      description: "Fetches the user affiliated with the session"
      operationId: users_self
      parameters:
        - $ref: "#/components/parameters/sessionId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /session:
    get:
      tags:
        - fetch
      summary: Fetch session
      description: "Fetches information about the session"
      operationId: session
      parameters:
        - $ref: "#/components/parameters/sessionId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
                
  /sudo:
    post:
      tags:
        - authentification
      summary: Sudo Mode
      description: "Enables the sudo mode (Required for critical actions)."
      operationId: sudo
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  description: "The user's password's SHA512 hex digest"
                  example: "6A1A778143E4672886991729035807CABEB75AD42A3FE4BF580CFBDF5CEA7C476705D878AF5F0FD0DC07D19F2959E224B21788E561F046177F6752B4BCC59E2C"
      parameters:
        - $ref: "#/components/parameters/sessionId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  expires:
                    type: number
                    description: "The new sudo expiring date"
                    example: 39234893

externalDocs:
  description: Documentation
  url: https://docs.palaten.de/openapi/palaten_api
servers:
  - url: https://api.palaten.de
 
components:
  schemas:
    User:
      type: object
      required:
        - id
        - name
        - createdAt
      properties:
        id:
          type: integer
          minimum: 0
          description: "The user's id"
          example: 69
        name:
          type: string
          description: "The user's name"
          example: "ExampleUser"
        email:
          type: string
          description: "The user's email address"
          example: "example@email.com"
        createdAt:
          type: integer
          format: int32
          minimum: 0
          example: 1673547962
          description: "The user's creation date (UTC-Timestamp)"
    
    Session:
      type: object
      properties:
        sudo:
          type: integer
          format: int32
          minimum: 0
          example: 167234792
          description: "Indicates when sudo mode will run out (UTC-Timestamp)"
        user:
          $ref: "#/components/schemas/User"
        createdAt:
          type: integer
          format: int32
          minimum: 0
          example: 134554342
          description: "The user's creation date (UTC-Timestamp)"
    
    Error:
      type: object
      properties:
        key:
          type: string
          description: "The error key"
          enum:
            - databaseError
            - userAgentMissing
            - paypalError
            - invalidCredentials
            - invalidSession
            - invalidIpAddress
            - invalidEmail
            - invalidVerificationCode
            - invalidName
            - invalidSpecs
            - invalidDuration
            - invalidPriceType
            - invalidType
            - invalidUserId
            - invalidHashFormat
            - detailsTaken
          example: "invalidCredentials"
        message:
          type: string
          description: "A more descriptive error message"
          example: "Invalid credentials"
        statusCode:
          type: integer
          format: i32
          minimum: 0
          maximum: 599
          description: "The HTTP Statuscode"
          example: 401

  parameters:
    sessionId:
      name: sessionId
      in: header
      required: true
      schema:
        type: string
      description: "The sessionId header (see /login)"
      example: "1FA74E9D04B813BD69CDDE52A3612AB8849E50E2016BC22206E0752EC7956FEE"

